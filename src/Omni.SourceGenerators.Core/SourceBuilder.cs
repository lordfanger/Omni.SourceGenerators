namespace Omni.SourceGenerators.Core;

/// <summary>
/// Builder to generate single generated file.
/// </summary>
public readonly ref struct SourceBuilder
{
    // TODO use shared pool
    private readonly StringBuilderWrapper _sbWrapper;

    /// <summary>
    /// Builder to generate single generated file.
    /// </summary>
    public SourceBuilder()
    {
        _sbWrapper = new(new StringBuilder());
        _sbWrapper
            .AppendLine("// <auto-generated/>")
            .AppendLine("#nullable enable")
            .AppendLine();
    }

    /// <summary>
    /// Start building source code for class.
    /// </summary>
    /// <param name="name">Class name.</param>
    /// <returns>Builder to build source code for class.</returns>
    public OpeningTypeBuilder BuildClass(string name) => new(_sbWrapper, name, GeneratedTypeKind.Class);

    /// <summary>
    /// Start building source code for interface.
    /// </summary>
    /// <param name="name">Interface name.</param>
    /// <returns>Builder to build source code for interface.</returns>
    public OpeningTypeBuilder BuildInterface(string name) => new(_sbWrapper, name, GeneratedTypeKind.Interface);

    /// <summary>
    /// Appends file-scoped namespace to source code.
    /// </summary>
    /// <param name="namespaceSymbol">Namespace for entire file.</param>
    /// <returns>Self source builder.</returns>
    public SourceBuilder AppendFileNamespace(INamespaceSymbol namespaceSymbol)
    {
        if (namespaceSymbol.IsGlobal()) return this;

        _sbWrapper.Append("namespace ").AppendNamespaceWithoutGlobal(namespaceSymbol).AppendLine(";");
        _sbWrapper.AppendLine();
        return this;
    }

    /// <summary>
    /// Adds source code for generated file to the compilation.
    /// </summary>
    /// <param name="context">Compilation context.</param>
    /// <param name="typeSymbol">Type symbol to generate hint name.</param>
    /// <param name="suffix">Optional suffix to differentiate generated files.</param>
    /// <remarks>
    /// Hint name for generated file will be:
    /// <code>$TYPE_NAMESPACE.$TYPE_NAME[.$SUFFIX].g.cs</code>
    /// </remarks>
    public void AddToContext(SourceProductionContext context, ITypeSymbol typeSymbol, string? suffix = null) => AddToContext(context, typeSymbol.ContainingNamespace, typeSymbol.Name, suffix);

    /// <summary><inheritdoc cref="AddToContext(SourceProductionContext,ITypeSymbol,string?)" path="/summary"/></summary>
    /// <param name="context"><inheritdoc cref="AddToContext(SourceProductionContext,ITypeSymbol,string?)" path="/param[@name='context']"/></param>
    /// <param name="namespaceSymbol">Namespace symbol to generate hint name.</param>
    /// <param name="name">Name for file.</param>
    /// <param name="suffix"><inheritdoc cref="AddToContext(SourceProductionContext,ITypeSymbol,string?)" path="/param[@name='suffix']"/></param>
    /// <remarks>
    /// Hint name for generated file will be:
    /// <code>$NAMESPACE.$NAME[.$SUFFIX].g.cs</code>
    /// </remarks>
    public void AddToContext(SourceProductionContext context, INamespaceSymbol namespaceSymbol, string name, string? suffix = null)
    {
        // TODO use shared pool and different wrapper (some generic string builder? source code builder is overkill)
        var filePathSbWrapper = new StringBuilderWrapper(new StringBuilder());
        if (namespaceSymbol.IsNotGlobal())
        {
            filePathSbWrapper.AppendNamespaceWithoutGlobal(namespaceSymbol).Append('.');
        }
        filePathSbWrapper.Append(name);
        if (suffix != null)
        {
            filePathSbWrapper.Append('.').Append(suffix);
        }
        filePathSbWrapper.Append(".g.cs");
        context.AddSource(filePathSbWrapper.ToString(), _sbWrapper.ToString());
    }

}
